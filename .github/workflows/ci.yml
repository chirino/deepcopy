name: ci

on:
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      comment-id: ${{ steps.comment.outputs.comment_id }}
      coverage: ${{ steps.test.outputs.coverage }}
    steps:
      - name: Wait for Previous Runs (Release Pull Request)
        if: ${{ contains(github.head_ref, 'release-v') }}
        uses: ahmadnassri/action-workflow-queue@v1

      - name: Cancel Previous Runs
        if: ${{ !contains(github.head_ref, 'release-v') }}
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
          all_but_latest: true

      - name: Find Existing Deployment Comment
        uses: sandeshjangam/comment-actions@v1
        id: find-comment
        with:
          token: ${{ secrets.DEVBOT_GITHUB_TOKEN }}
          type: find
          number: ${{ github.event.pull_request.number }}
          search_term: "<!-- fluidtruck-ci: helm -->"

      - name: Delete Existing Deployment Comment
        if: ${{ steps.find-comment.outputs.comment_id }}
        uses: sandeshjangam/comment-actions@v1
        with:
          token: ${{ secrets.DEVBOT_GITHUB_TOKEN }}
          type: delete
          comment_id: ${{ steps.find-comment.outputs.comment_id }}

      - name: Create Deployment Comment
        uses: sandeshjangam/comment-actions@v1
        id: comment
        with:
          token: ${{ secrets.DEVBOT_GITHUB_TOKEN }}
          type: create
          number: ${{ github.event.pull_request.number }}
          body: |
            <!-- fluidtruck-ci: helm -->
            This pull request is being deployed with Helm.

            üîç  Inspect: https://github.com/fluidtruck/telematics/actions/runs/${{ github.run_id }}
            ‚úÖ  Preview: _Pending..._
            üôà  Coverage: _Pending..._

      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Golang
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - name: Cache Go Dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Configure Git
        env:
          GITHUB_TOKEN: ${{ secrets.DEVBOT_GITHUB_TOKEN }}
        run: |
          git config --global url."https://${GITHUB_TOKEN}:x-oauth-basic@github.com/fluidshare/".insteadOf "https://github.com/fluidshare/"
          git config --global url."https://${GITHUB_TOKEN}:x-oauth-basic@github.com/fluidtruck/".insteadOf "https://github.com/fluidtruck/"

      - name: Run Tests
        id: test
        run: |
          go test -v -coverprofile=coverage.out -covermode=count ./...
          total=`go tool cover -func=coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+'`
          echo "got total"
          echo $total
          echo ::set-output name=coverage::$total

  build:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Google Container Registry
        uses: docker/login-action@v1
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GCR_SERVICE_ACCOUNT_KEY }}

      - name: Set Build Args
        id: build-args
        run: |
          echo ::set-output name=GIT_COMMIT::${GITHUB_SHA:0:7}
          echo ::set-output name=VERSION::$(cat version.txt | xargs)

      - name: Build Docker Image
        uses: docker/build-push-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.DEVBOT_GITHUB_TOKEN }}
        with:
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          secrets: |
            "github_token=${{ secrets.DEVBOT_GITHUB_TOKEN }}"
          tags: |
            gcr.io/container-registry-8cce/deepcopy:latest
            gcr.io/container-registry-8cce/deepcopy:${{ steps.build-args.outputs.GIT_COMMIT }}
            gcr.io/container-registry-8cce/deepcopy:${{ steps.build-args.outputs.VERSION }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        cluster:
          - apps-stage
        include:
          - cluster: apps-stage
            cluster_name: GKE_CLUSTER_APPS_STAGE_NAME
            cluster_location: GKE_CLUSTER_APPS_STAGE_LOCATION
            cluster_credentials: GKE_CLUSTER_APPS_STAGE_CREDENTIALS
    outputs:
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cluster Authentication
        uses: google-github-actions/get-gke-credentials@v0.3.0
        with:
          cluster_name: ${{ secrets[matrix.cluster_name] }}
          location: ${{ secrets[matrix.cluster_location] }}
          credentials: ${{ secrets[matrix.cluster_credentials] }}

      - name: Setup Helm
        uses: azure/setup-helm@v1

      - name: Add Helm Repo
        run: helm repo add fluidtruck https://fluidtruck.github.io/helm-charts

      - name: Deploy
        id: deploy
        run: |
          NAMESPACE="deepcopy"

          if [[ "${GITHUB_HEAD_REF}" =~ ^"release-v" ]]; then
            RELEASE_NAME="deepcopy"
            IMAGE_TAG=$(cat ./version.txt)
            ENV="stage"
          else
            RELEASE_NAME=$(echo ${GITHUB_HEAD_REF/refs\/head\//} | iconv -c -t ascii//TRANSLIT | sed -r 's/[~\^]+//g' | sed -r 's/[^a-zA-Z0-9]+/-/g' | sed -r 's/^-+\|-+$//g' | tr A-Z a-z | cut -c 1-53)
            IMAGE_TAG="${GITHUB_SHA:0:7}"
            ENV="dev"
          fi

          HELM_STATUS=$(helm status ${RELEASE_NAME} -n ${NAMESPACE} -o json | jq -r '.info.status')
          HELM_VERSION=$(helm status ${RELEASE_NAME} -n ${NAMESPACE} -o json | jq -r '.version')
          if [ -n "${HELM_STATUS}" ] && [[ "${HELM_STATUS}" != "deployed" ]]; then
            if [[ "${HELM_VERSION}" == "1" ]]; then
              helm uninstall ${RELEASE_NAME} -n ${NAMESPACE} --timeout 300s
            else
              helm rollback ${RELEASE_NAME} -n ${NAMESPACE} --wait --timeout 300s
            fi
          fi

          echo "==> RELEASE_NAME: ${RELEASE_NAME}"
          echo "==> NAMESPACE: ${NAMESPACE}"
          echo "==> ENV: ${ENV}"
          echo "==> IMAGE_TAG: ${IMAGE_TAG}"

          helm upgrade ${RELEASE_NAME} fluidtruck/golang \
            --version "4.0.1" \
            --install \
            --atomic \
            --namespace ${NAMESPACE} \
            --create-namespace \
            --set image.tag="${IMAGE_TAG}" \
            --set image.pullPolicy="Always" \
            -f ./chart/common.yaml \
            -f ./chart/${ENV}.yaml

          SERVICE_NAME=$(kubectl get service -n ${NAMESPACE} -l "app.kubernetes.io/instance=${RELEASE_NAME}" -o json | jq -r '.items[0].metadata.name')
          echo ::set-output name=url::${SERVICE_NAME}.${NAMESPACE}.svc.cluster.local

  preview:
    runs-on: ubuntu-latest
    if: ${{ always() }}%
    needs: [test, deploy]
    steps:
      - name: Update Deployment Comment (success)
        uses: sandeshjangam/comment-actions@v1
        if: ${{ needs.deploy.result == 'success' }}
        with:
          token: ${{ secrets.DEVBOT_GITHUB_TOKEN }}
          type: update
          comment_id: ${{ needs.test.outputs.comment-id }}
          body: |
            <!-- fluidtruck-ci: helm -->
            This pull request has been deployed using Helm!

            üîç  Inspect: https://github.com/fluidtruck/deepcopy/actions/runs/${{ github.run_id }}
            ‚úÖ  Preview: ${{ needs.deploy.outputs.url }}
            üôà  Coverage: ${{ needs.test.outputs.coverage }}%

      - name: Update Deployment Comment (failed)
        uses: sandeshjangam/comment-actions@v1
        if: ${{ needs.deploy.result != 'success' }}
        with:
          token: ${{ secrets.DEVBOT_GITHUB_TOKEN }}
          type: update
          comment_id: ${{ needs.test.outputs.comment-id }}
          body: |
            <!-- fluidtruck-ci: helm -->
            ‚ùå  This pull request failed to deploy. Click the link below to see why.

            üîç  Inspect: https://github.com/fluidtruck/deepcopy/actions/runs/${{ github.run_id }}
            ‚úÖ  Preview: ${{ needs.deploy.outputs.url || '_Not set_' }}
            üôà  Coverage: ${{ needs.test.outputs.coverage || '_Not set_' }}%
